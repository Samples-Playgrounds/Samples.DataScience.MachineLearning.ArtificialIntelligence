@page "/"
@using Statistics.Core
@using System.Text

<PageTitle>Descriptive Statistics - Blazor Server</PageTitle>

<div class="container">
    <h1>Descriptive Statistics</h1>
    <h4>Blazor Server Implementation</h4>
    
    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Enter Data</h5>
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label>Enter numbers separated by commas, spaces, or new lines:</label>
                        <textarea @bind="InputData" class="form-control" rows="5" placeholder="e.g. 10, 23, 45, 67, 89"></textarea>
                    </div>
                    <div class="mt-3">
                        <button class="btn btn-primary" @onclick="AnalyzeData">Analyze Data</button>
                        <button class="btn btn-secondary ms-2" @onclick="LoadSampleData">Load Sample Data</button>
                        <button class="btn btn-outline-danger ms-2" @onclick="ClearData">Clear</button>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            @if (ErrorMessage != null)
            {
                <div class="alert alert-danger">
                    @ErrorMessage
                </div>
            }
            
            @if (Stats != null)
            {
                <div class="card">
                    <div class="card-header">
                        <h5>Statistics Results</h5>
                    </div>
                    <div class="card-body">
                        <table class="table table-striped">
                            <tbody>
                                <tr>
                                    <th>Count</th>
                                    <td>@Stats.Count</td>
                                </tr>
                                <tr>
                                    <th>Sum</th>
                                    <td>@Stats.Sum.ToString("F4")</td>
                                </tr>
                                <tr>
                                    <th>Minimum</th>
                                    <td>@Stats.Minimum.ToString("F4")</td>
                                </tr>
                                <tr>
                                    <th>Maximum</th>
                                    <td>@Stats.Maximum.ToString("F4")</td>
                                </tr>
                                <tr>
                                    <th>Range</th>
                                    <td>@Stats.Range.ToString("F4")</td>
                                </tr>
                                <tr>
                                    <th>Mean</th>
                                    <td>@Stats.Mean.ToString("F4")</td>
                                </tr>
                                <tr>
                                    <th>Median</th>
                                    <td>@Stats.Median.ToString("F4")</td>
                                </tr>
                                <tr>
                                    <th>Mode</th>
                                    <td>@Stats.Mode.ToString("F4")</td>
                                </tr>
                                <tr>
                                    <th>Standard Deviation</th>
                                    <td>@Stats.StandardDeviation.ToString("F4")</td>
                                </tr>
                                <tr>
                                    <th>Variance</th>
                                    <td>@Stats.Variance.ToString("F4")</td>
                                </tr>
                                <tr>
                                    <th>25th Percentile</th>
                                    <td>@Stats.GetPercentile(25).ToString("F4")</td>
                                </tr>
                                <tr>
                                    <th>75th Percentile</th>
                                    <td>@Stats.GetPercentile(75).ToString("F4")</td>
                                </tr>
                                <tr>
                                    <th>Skewness</th>
                                    <td>@Stats.Skewness.ToString("F4")</td>
                                </tr>
                                <tr>
                                    <th>Kurtosis</th>
                                    <td>@Stats.Kurtosis.ToString("F4")</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string InputData { get; set; } = string.Empty;
    private DescriptiveStatistics Stats { get; set; }
    private string ErrorMessage { get; set; }

    private void AnalyzeData()
    {
        ErrorMessage = null;
        
        if (string.IsNullOrWhiteSpace(InputData))
        {
            ErrorMessage = "Please enter some data to analyze.";
            return;
        }

        try
        {
            var numbers = ParseInput(InputData);
            if (numbers.Length == 0)
            {
                ErrorMessage = "No valid numbers found in the input.";
                return;
            }
            
            Stats = new DescriptiveStatistics(numbers);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
    }

    private void LoadSampleData()
    {
        double[] sampleData = { 5, 19, 24, 62, 91, 100, 75, 42, 44, 16, 21, 34, 80, 52, 47, 6, 42, 18, 13, 23 };
        InputData = string.Join(", ", sampleData);
        AnalyzeData();
    }

    private void ClearData()
    {
        InputData = string.Empty;
        Stats = null;
        ErrorMessage = null;
    }

    private double[] ParseInput(string input)
    {
        var separators = new[] { ' ', ',', '\n', '\r', '\t', ';' };
        return input.Split(separators, StringSplitOptions.RemoveEmptyEntries)
                   .Select(s => 
                   {
                       if (double.TryParse(s.Trim(), out double number))
                           return (true, number);
                       return (false, 0);
                   })
                   .Where(x => x.Item1)
                   .Select(x => x.Item2)
                   .ToArray();
    }
}
